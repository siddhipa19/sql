CREATE DATABASE company_db;
USE company_db;

-- 1. Drop tables if they already exist (to reset)
DROP TABLE IF EXISTS projects;
DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS departments;

-- 2. Create departments table
CREATE TABLE departments (
    department_id INT PRIMARY KEY,
    department_name VARCHAR(50)
);

-- 3. Create employees table
CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    department_id INT,
    manager_id INT,
    FOREIGN KEY (department_id) REFERENCES departments(department_id),
    FOREIGN KEY (manager_id) REFERENCES employees(emp_id)
);

-- 4. Create projects table
CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name VARCHAR(50),
    emp_id INT,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
);

-- 5. Insert sample data into departments
INSERT INTO departments (department_id, department_name) VALUES
(10, 'HR'),
(20, 'IT'),
(30, 'Finance'),
(40, 'Marketing');

DELETE FROM departments WHERE department_id = 40;

DROP TABLE departments;

-- 6. Insert sample data into employees
INSERT INTO employees (emp_id, name, department_id, manager_id) VALUES
(1, 'Alice', 10, NULL),
(2, 'Bob', 20, 1),
(3, 'Charlie', NULL, 1),
(4, 'David', 10, 2),
(5, 'Eve', 30, NULL);  -- Note: dept 30 doesn't exist
-- We’ll skip manager_id foreign key for Eve if dept 30 doesn't exist

-- 7. Insert sample data into projects
INSERT INTO projects (project_id, project_name, emp_id) VALUES
(100, 'Alpha', 1),
(101, 'Beta', 2),
(102, 'Gamma', 5);

-- List all employees along with their department names.

SELECT name, department_name
FROM employees
INNER JOIN departments
ON employees.department_id = departments.department_id; 

-- List all employees and their department names.

SELECT name, department_name
FROM employees
LEFT JOIN departments
ON employees.department_id = departments.department_id;

-- List all departments and employees (include departments with no employees)

SELECT d.department_name, e.name AS employee
FROM departments d
RIGHT JOIN employees e
ON d.department_id = e.department_id;

-- Show all employees and departments, even if they don’t match

SELECT e.name AS employee, d.department_name
FROM employees e 
LEFT JOIN departments d
ON e.department_id = d.department_id

UNION

SELECT e.name AS employee, d.department_name
FROM employees e
RIGHT JOIN departments d
ON d.department_id = e.department_id ;

-- List all employees with their department names.

SELECT e.name, d.department_name
FROM employees e
JOIN departments d 
ON e.department_id = d.department_id;

-- List all employees, including those who don’t belong to any department.

SELECT e.name, d.department_name
FROM employees e 
LEFT JOIN departments d 
ON e.department_id = d.department_id;

-- List all departments, including those that don’t have any employees.

SELECT d.department_name, e.name
FROM departments d 
RIGHT JOIN employees e
ON d.department_id = e.department_id;

-- Show all employees and all departments, even if they don’t match.

SELECT e.name, d.department_name
FROM employees e 
LEFT JOIN departments d
ON e.department_id = d.department_id

UNION

SELECT e.name, d.department_name
FROM employees e 
RIGHT JOIN departments d
ON e.department_id = d.department_id;

-- Show each employee and their manager’s name.

SELECT e.name AS employee, m.name AS manager
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.emp_id;

push git
